// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoixMagicroquanteWebsite;

#nullable disable

namespace NoixMagicroquanteWebsite.Migrations
{
    [DbContext(typeof(NoixMagicroquanteWebsiteContext))]
    [Migration("20231112184839_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketId"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.BasketProduct", b =>
                {
                    b.Property<int>("BPProductId")
                        .HasColumnType("int");

                    b.Property<int>("BPBasketId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BPProductId", "BPBasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketProduct");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Détergent"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Outil nettoyant"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Papier"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Biscuits"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Breuvage"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Chocolat"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Fruit"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Légume"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Café"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Outil construction"
                        });
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Edible")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxId");

                    b.HasIndex("UnitId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Edible = false,
                            Image = "",
                            Name = "ComLet",
                            PurchasePrice = 4.0,
                            SellingPrice = 8.0,
                            Stock = 8,
                            TaxId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Edible = false,
                            Image = "",
                            Name = "JaBlex",
                            PurchasePrice = 7.0,
                            SellingPrice = 14.0,
                            Stock = 10,
                            TaxId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Edible = false,
                            Image = "",
                            Name = "Mr.Blet",
                            PurchasePrice = 2.0,
                            SellingPrice = 4.0,
                            Stock = 3,
                            TaxId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Edible = false,
                            Image = "",
                            Name = "Pasmalivre",
                            PurchasePrice = 3.0,
                            SellingPrice = 6.0,
                            Stock = 0,
                            TaxId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Edible = false,
                            Image = "",
                            Name = "Stablex",
                            PurchasePrice = 5.0,
                            SellingPrice = 10.0,
                            Stock = 21,
                            TaxId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Edible = false,
                            Image = "",
                            Name = "Brosse",
                            PurchasePrice = 3.0,
                            SellingPrice = 6.0,
                            Stock = 41,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Edible = false,
                            Image = "",
                            Name = "Balai",
                            PurchasePrice = 10.0,
                            SellingPrice = 20.0,
                            Stock = 21,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Edible = false,
                            Image = "",
                            Name = "Serviette",
                            PurchasePrice = 6.0,
                            SellingPrice = 12.0,
                            Stock = 30,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Edible = false,
                            Image = "",
                            Name = "Cuve",
                            PurchasePrice = 12.0,
                            SellingPrice = 24.0,
                            Stock = 8,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Edible = false,
                            Image = "",
                            Name = "Mopette",
                            PurchasePrice = 17.0,
                            SellingPrice = 34.0,
                            Stock = 12,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Edible = false,
                            Image = "",
                            Name = "Mouchoirs",
                            PurchasePrice = 5.0,
                            SellingPrice = 10.0,
                            Stock = 60,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3,
                            Edible = false,
                            Image = "",
                            Name = "Essuie-tout",
                            PurchasePrice = 6.0,
                            SellingPrice = 12.0,
                            Stock = 20,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Edible = false,
                            Image = "",
                            Name = "Papier toilette",
                            PurchasePrice = 9.0,
                            SellingPrice = 18.0,
                            Stock = 128,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            Edible = true,
                            Image = "",
                            Name = "Ore-crisp",
                            PurchasePrice = 6.0,
                            SellingPrice = 12.0,
                            Stock = 5,
                            TaxId = 2,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4,
                            Edible = true,
                            Image = "",
                            Name = "Crispie-Soda",
                            PurchasePrice = 3.0,
                            SellingPrice = 6.0,
                            Stock = 12,
                            TaxId = 2,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            Edible = true,
                            Image = "",
                            Name = "Petit-beurrier",
                            PurchasePrice = 5.0,
                            SellingPrice = 10.0,
                            Stock = 20,
                            TaxId = 2,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5,
                            Edible = true,
                            Image = "",
                            Name = "Gotorade",
                            PurchasePrice = 2.0,
                            SellingPrice = 4.0,
                            Stock = 30,
                            TaxId = 2,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5,
                            Edible = true,
                            Image = "",
                            Name = "Lait",
                            PurchasePrice = 5.0,
                            SellingPrice = 10.0,
                            Stock = 5,
                            TaxId = 2,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 5,
                            Edible = true,
                            Image = "",
                            Name = "Oranginol",
                            PurchasePrice = 1.0,
                            SellingPrice = 2.0,
                            Stock = 15,
                            TaxId = 2,
                            UnitId = 2
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 6,
                            Edible = true,
                            Image = "",
                            Name = "Wondermilk",
                            PurchasePrice = 1.0,
                            SellingPrice = 2.0,
                            Stock = 24,
                            TaxId = 2,
                            UnitId = 3
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 6,
                            Edible = true,
                            Image = "",
                            Name = "Aeriol",
                            PurchasePrice = 1.0,
                            SellingPrice = 2.0,
                            Stock = 32,
                            TaxId = 2,
                            UnitId = 3
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 7,
                            Edible = true,
                            Image = "",
                            Name = "Orange",
                            PurchasePrice = 1.0,
                            SellingPrice = 2.0,
                            Stock = 30,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 7,
                            Edible = true,
                            Image = "",
                            Name = "Pomme",
                            PurchasePrice = 1.0,
                            SellingPrice = 2.0,
                            Stock = 20,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 7,
                            Edible = true,
                            Image = "",
                            Name = "Banane",
                            PurchasePrice = 2.0,
                            SellingPrice = 4.0,
                            Stock = 18,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 7,
                            Edible = true,
                            Image = "",
                            Name = "Cantaloup",
                            PurchasePrice = 5.0,
                            SellingPrice = 10.0,
                            Stock = 4,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 8,
                            Edible = true,
                            Image = "",
                            Name = "Tomate",
                            PurchasePrice = 2.0,
                            SellingPrice = 4.0,
                            Stock = 9,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 8,
                            Edible = true,
                            Image = "",
                            Name = "Cocombre",
                            PurchasePrice = 2.0,
                            SellingPrice = 4.0,
                            Stock = 12,
                            TaxId = 2,
                            UnitId = 4
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 9,
                            Edible = true,
                            Image = "",
                            Name = "Café corsé",
                            PurchasePrice = 10.0,
                            SellingPrice = 20.0,
                            Stock = 20,
                            TaxId = 2,
                            UnitId = 5
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 9,
                            Edible = true,
                            Image = "",
                            Name = "Café velouté",
                            PurchasePrice = 10.0,
                            SellingPrice = 20.0,
                            Stock = 80,
                            TaxId = 2,
                            UnitId = 5
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 9,
                            Edible = true,
                            Image = "",
                            Name = "Café décaféiné",
                            PurchasePrice = 11.0,
                            SellingPrice = 22.0,
                            Stock = 30,
                            TaxId = 2,
                            UnitId = 5
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Tournevis",
                            PurchasePrice = 3.0,
                            SellingPrice = 6.0,
                            Stock = 17,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Scie ronde",
                            PurchasePrice = 90.0,
                            SellingPrice = 180.0,
                            Stock = 9,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Marteau",
                            PurchasePrice = 15.0,
                            SellingPrice = 30.0,
                            Stock = 27,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Équerre",
                            PurchasePrice = 10.0,
                            SellingPrice = 20.0,
                            Stock = 18,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Ruban à mesurer",
                            PurchasePrice = 12.0,
                            SellingPrice = 24.0,
                            Stock = 13,
                            TaxId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Clous 1 pouce",
                            PurchasePrice = 4.0,
                            SellingPrice = 8.0,
                            Stock = 8,
                            TaxId = 1,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Clous 2 pouces",
                            PurchasePrice = 6.0,
                            SellingPrice = 12.0,
                            Stock = 6,
                            TaxId = 1,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Clous 3 pouces",
                            PurchasePrice = 8.0,
                            SellingPrice = 16.0,
                            Stock = 12,
                            TaxId = 1,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Clous à béton",
                            PurchasePrice = 10.0,
                            SellingPrice = 20.0,
                            Stock = 7,
                            TaxId = 1,
                            UnitId = 6
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 10,
                            Edible = false,
                            Image = "",
                            Name = "Clous à finition",
                            PurchasePrice = 6.0,
                            SellingPrice = 12.0,
                            Stock = 14,
                            TaxId = 1,
                            UnitId = 6
                        });
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Tax");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TPS + TVQ 5% + 9.975%",
                            Rate = 14.975f
                        },
                        new
                        {
                            Id = 2,
                            Name = "No Taxes",
                            Rate = 0f
                        });
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Name = "Item"
                        },
                        new
                        {
                            UnitId = 2,
                            Name = "Bouteille"
                        },
                        new
                        {
                            UnitId = 3,
                            Name = "Barre"
                        },
                        new
                        {
                            UnitId = 4,
                            Name = "Unité"
                        },
                        new
                        {
                            UnitId = 5,
                            Name = "Unité (par kg)"
                        },
                        new
                        {
                            UnitId = 6,
                            Name = "Boite"
                        });
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@noixmagiques.com",
                            FirstName = "admin",
                            IsAdmin = true,
                            LastName = "admin",
                            Password = "AQAAAAEAACcQAAAAECp0ROY8Ai0bxYY7vrNEc2AMzZ9riapPYF4eisyY2+wsXUFLUMYsjtDTO3xCV4lrlA==",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Basket", b =>
                {
                    b.HasOne("NoixMagicroquanteWebsite.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.BasketProduct", b =>
                {
                    b.HasOne("NoixMagicroquanteWebsite.Models.Basket", "Basket")
                        .WithMany("BasketProduct")
                        .HasForeignKey("BPProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoixMagicroquanteWebsite.Models.Product", "Product")
                        .WithMany("BasketProduct")
                        .HasForeignKey("ProductId");

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Product", b =>
                {
                    b.HasOne("NoixMagicroquanteWebsite.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoixMagicroquanteWebsite.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoixMagicroquanteWebsite.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tax");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Basket", b =>
                {
                    b.Navigation("BasketProduct");
                });

            modelBuilder.Entity("NoixMagicroquanteWebsite.Models.Product", b =>
                {
                    b.Navigation("BasketProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
